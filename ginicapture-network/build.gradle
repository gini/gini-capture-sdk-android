plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

repositories {
    // Use repo on filesystem for using local builds
    mavenLocal()
}

dependencies {
    api "org.slf4j:slf4j-api:$versions.slf4j"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.annotation:annotation:$versions.androidxAnnotations"
    implementation project(path: ':ginicapture')
    api('net.gini:gini-pay-api-lib-android:1.0.1@aar') {
        transitive = true
    }

    testImplementation "junit:junit:$versions.junit"
    testImplementation "com.google.truth:truth:$versions.truth"
    testImplementation "org.mockito:mockito-core:$versions.mockito"

    androidTestImplementation "androidx.test:runner:$versions.androidxTest"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJUnit"
    androidTestImplementation "com.google.truth:truth:$versions.truth"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidxTestEspresso"
    androidTestImplementation "org.mockito:mockito-core:$versions.mockito"
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
}

apply from: rootProject.file('gradle/codequality.gradle')
apply from: rootProject.file('gradle/javadoc_coverage.gradle')

task generateJavadoc(type: GenerateJavadoc) {
    projectTitle = "Gini Capture Network Library for Android"
    source += project(":ginicapture").fileTree("src/main/java/net/gini/android/capture/network")
            .files.grep { it.name.endsWith('.java') && it.name != "package-info.java"}
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: generateJavadoc) {
    classifier = 'javadoc'
    from destinationDir
}

apply from: rootProject.file('gradle/maven.gradle')