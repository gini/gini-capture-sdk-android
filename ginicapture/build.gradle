apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.hiya.jacoco-android'
apply plugin: 'org.jetbrains.dokka'

jacoco {
    toolVersion = "0.8.7"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        // Use the test runner with JUnit4 support
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField 'int', 'VERSION_CODE', "${rootProject.ext.versionCode}"
        buildConfigField 'String', 'VERSION_NAME', "\"${rootProject.ext.versionName}\""
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Fix for DuplicateFileException when using Espresso (https://code.google.com/p/android/issues/detail?id=195331)
    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    // Fix for androidTest builds due to Play Services Vision and Espresso creating their own protobuf.meta files
    packagingOptions {
        pickFirst 'protobuf.meta'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
        kotlinOptions { jvmTarget = "1.8" }
    }

    sourceSets {
        debug {
            res.srcDirs += "$rootProject.projectDir/ginicapture/src/test/res"
        }
    }
}

dependencies {
    api "org.slf4j:slf4j-api:$versions.slf4j"
    implementation "androidx.core:core:$versions.androidxCore"
    implementation "androidx.appcompat:appcompat:$versions.androidxAppCompat"
    implementation "androidx.fragment:fragment:$versions.androidxFragment"
    implementation "androidx.viewpager:viewpager:$versions.androidxViewPager"
    implementation "androidx.recyclerview:recyclerview:$versions.androidxRecyclerView"
    implementation "com.google.android.material:material:$versions.materialDesign"
    implementation "androidx.cardview:cardview:$versions.androidxCardView"
    implementation "androidx.annotation:annotation:$versions.androidxAnnotations"
    implementation "com.google.android.gms:play-services-vision:$versions.playServicesVision"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.apache.commons:commons-imaging:$versions.commonsImaging"
    implementation "org.glassfish.jersey.bundles.repackaged:jersey-jsr166e:$versions.completableFuture"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: '${project.rootDir}/tools/doccheck-doclet', include: ['*.jar'])
    implementation "androidx.cardview:cardview:$versions.androidxCardView"

    testImplementation "junit:junit:$versions.junit"
    testImplementation "com.google.truth:truth:$versions.truth"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlin"
    testImplementation "org.mockito:mockito-inline:$versions.mockito"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation "androidx.test:core:$versions.androidxTest"
    testImplementation "androidx.test.ext:junit:$versions.androidxTestJUnit"
    testImplementation "androidx.test:runner:$versions.androidxTest"
    testImplementation "androidx.test.espresso:espresso-core:$versions.androidxTestEspresso"
    testImplementation "androidx.test.espresso:espresso-intents:$versions.androidxTestEspresso"

    debugImplementation "androidx.test:core:$versions.androidxTest"
    debugImplementation "androidx.fragment:fragment-testing:$versions.androidxFragmentTesting"

    androidTestImplementation "androidx.test:core:$versions.androidxTest"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJUnit"
    androidTestImplementation "androidx.test:runner:$versions.androidxTest"
    androidTestImplementation "com.google.truth:truth:$versions.truth"
    androidTestImplementation "androidx.test:rules:$versions.androidxTest"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidxTestEspresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$versions.androidxTestEspresso"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$versions.androidxTestUiAutomator"
    androidTestImplementation "org.mockito:mockito-core:$versions.mockito"
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
    androidTestImplementation "androidx.multidex:multidex:$versions.androidxMultidex"

    androidTestUtil "androidx.test:orchestrator:$versions.androidxTest"

    dokkaHtmlPlugin 'org.jetbrains.dokka:kotlin-as-java-plugin:1.4.32'
}

apply from: rootProject.file('gradle/codequality.gradle')
apply from: rootProject.file('gradle/maven.gradle')
apply from: rootProject.file('gradle/javadoc_coverage.gradle')
apply from: rootProject.file('gradle/multidex_for_tests.gradle')

dokkaHtml {
    outputDirectory.set(file("$buildDir/dokka"))
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)

            includes.from(files("module.md", packageDocumentationPaths(android.sourceSets.main.java.srcDirs[0])))

            perPackageOption {
                prefix.set('com.ortiz')
                suppress.set(true)
            }
            perPackageOption {
                prefix.set('net.gini.android.capture.internal')
                suppress.set(true)
            }
            perPackageOption {
                prefix.set('net.gini.android.capture.util')
                suppress.set(true)
            }
            perPackageOption {
                prefix.set('net.gini.android.capture.review.multipage.previews')
                suppress.set(true)
            }
            perPackageOption {
                prefix.set('net.gini.android.capture.review.multipage.thumbnails')
                suppress.set(true)
            }
        }
    }
}

dokkaJavadoc {
    outputDirectory.set(file("$buildDir/dokka-javadoc"))
}

static def packageDocumentationPaths(srcDir) {
    def packageDocs = []
    srcDir.eachFileRecurse {
        if (it.name == 'package.md') {
            packageDocs.add(it.getAbsolutePath())
        }
    }
    return packageDocs
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
